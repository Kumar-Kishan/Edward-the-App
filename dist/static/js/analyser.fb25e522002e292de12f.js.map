{"version":3,"sources":["webpack:///./src/app/analyser/analyser.page.vue","webpack:///./src/app/analyser/commonWords.analysis.js","webpack:///./src/app/analyser/aiGhostwriter.analysis.js","webpack:///./src/app/analyser/analyses.js","webpack:///./src/app/analyser/wordOverTime.analysis.js","webpack:///./src/app/analyser/analyser.page.vue?0468","webpack:///src/app/analyser/analyser.page.vue"],"names":["_node_modules_vue_loader_lib_runtime_component_normalizer__WEBPACK_IMPORTED_MODULE_2__","__webpack_require__","__vue_styles__","context","Component","Object","_babel_loader_node_modules_vue_loader_lib_selector_type_script_index_0_analyser_page_vue__WEBPACK_IMPORTED_MODULE_0___default","a","_node_modules_vue_loader_lib_template_compiler_index_id_data_v_105f4076_hasScoped_true_optionsId_0_buble_transforms_node_modules_vue_loader_lib_selector_type_template_index_0_analyser_page_vue__WEBPACK_IMPORTED_MODULE_1__","__webpack_exports__","d3","_deltaParser","ignoredWords","split","map","str","toLowerCase","_ref","chapters","_ref2","svg","g","maxHeight","maxWidth","wordArray","concat","apply","_toConsumableArray3","default","chapter","GetWordArray","content","word","filter","includes","wordDict","_flow2","_groupBy2","frequencies","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","_getIterator3","_keys2","next","done","key","value","hasOwnProperty","push","frequency","length","err","return","orderedFrequencies","_orderBy2","obj","_take2","Error","margin","attr","barHeight","barInnerHeight","barPadding","x","scaleLinear","domain","rangeRound","bar","selectAll","data","enter","append","d","i","index","y","text","el","fullText","GetContentString","join","sentence","Text","makeSentence","tries","innerHTML","parent","select","style","clearPrevious","makeSvg","offsetWidth","safelyRunAnalysis","analysisFn","args","onError","e","_sweetalert2","icon","all","description","inputs","run","resultsWindow","unarchivedChapters","archived","CommonWords","title","validateArgs","this","WordOverTime","_ref3","chaptersWithContent","AiGhostwriter","analysis","wordArg","Word","chapterResults","result","Math","max","call","axisBottom","tickFormat","substring","truncate","tickValues","_range2","axisLeft","line","datum","staticRenderFns","render","_vm","_h","$createElement","_c","_self","staticClass","_v","_l","directives","name","rawName","class","button-green","currentAnalysis","attrs","on","click","$event","selectAnalysis","_s","input","for","getInputId","expression","id","domProps","target","composing","$set","_e","runAnalysis","ref","computed","document","$store","state","showInputs","Analyses","_analyses2","tooltip","_tooltip2","methods","$refs","results"],"mappings":"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","file":"static/js/analyser.fb25e522002e292de12f.js","sourcesContent":["function injectStyle (context) {\n  require(\"!!../../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"minimize\\\":true,\\\"sourceMap\\\":true}!../../../node_modules/vue-loader/lib/style-compiler/index?{\\\"optionsId\\\":\\\"0\\\",\\\"vue\\\":true,\\\"id\\\":\\\"data-v-105f4076\\\",\\\"scoped\\\":true,\\\"sourceMap\\\":false}!../../../node_modules/vue-loader/lib/selector?type=styles&index=0!./analyser.page.vue\")\n}\n/* script */\nexport * from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./analyser.page.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../node_modules/vue-loader/lib/selector?type=script&index=0!./analyser.page.vue\"\n/* template */\nimport {render as __vue_render__, staticRenderFns as __vue_static_render_fns__} from \"!!../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-105f4076\\\",\\\"hasScoped\\\":true,\\\"optionsId\\\":\\\"0\\\",\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../node_modules/vue-loader/lib/selector?type=template&index=0!./analyser.page.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = \"data-v-105f4076\"\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nimport normalizeComponent from \"!../../../node_modules/vue-loader/lib/runtime/component-normalizer\"\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_render__,\n  __vue_static_render_fns__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n","import flow from 'lodash/fp/flow'\r\nimport groupBy from 'lodash/fp/groupBy'\r\nimport orderBy from 'lodash/fp/orderBy'\r\nimport take from 'lodash/fp/take'\r\nimport * as d3 from 'd3'\r\nimport { GetWordArray } from '../shared/deltaParser'\r\n\r\nconst ignoredWords = `\r\n  the a an\r\n  and but not or\r\n  I me we us you she her he him they them it\r\n  I've I'll I'd we've we'll we'd you've you'll you'd\r\n  she's she'll she'd he's he'll he'd they've they'll they'd\r\n  it's it'll it'd\r\n  I'm you're they're\r\n  myself ourself ourselves yourself yourselves\r\n  herself himself theirself theirselves themselves\r\n  my mine our ours your yours hers his their theirs its\r\n  to from of in for as with so at by on\r\n  be being is was were would will\r\n  do doing did done go going went\r\n  have having had\r\n  that those this these\r\n  not\r\n  what who which`\r\n  .split(/\\s/).map(str => str.toLowerCase())\r\n\r\nconst CommonWords = ({ g: svg, maxHeight, maxWidth }, chapters) => {\r\n  const wordArray = [].concat(...chapters.map(\r\n    chapter => GetWordArray(chapter.content)\r\n      .map(word => word.toLowerCase())\r\n      .filter(word => !ignoredWords.includes(word))\r\n  ))\r\n\r\n  const wordDict = flow(\r\n    groupBy(word => word)\r\n  )(wordArray)\r\n\r\n  const frequencies = []\r\n  for (var key of Object.keys(wordDict)) {\r\n    if (!wordDict.hasOwnProperty(key)) {\r\n      return\r\n    }\r\n\r\n    frequencies.push({\r\n      frequency: wordDict[key].length,\r\n      word: key\r\n    })\r\n  }\r\n\r\n  const orderedFrequencies = flow(\r\n    orderBy([obj => obj.frequency], ['desc']),\r\n    take(10)\r\n  )(frequencies)\r\n\r\n  if (!orderedFrequencies.length) {\r\n    throw new Error('No content was found.')\r\n  }\r\n\r\n  const margin = { bottom: 20, left: 20, top: 20, right: 20 }\r\n  const g = svg.attr('transform', `translate(${margin.left}, ${margin.top})`)\r\n\r\n  const barHeight = (maxHeight - margin.bottom - margin.top) / orderedFrequencies.length\r\n  const barPadding = 6\r\n  const barInnerHeight = barHeight - (barPadding * 2)\r\n  const barRightPad = 50\r\n\r\n  const x = d3.scaleLinear()\r\n  .domain([0, orderedFrequencies[0].frequency])\r\n  .rangeRound([0, maxWidth - margin.left - margin.right - barRightPad])\r\n\r\n  const y = index => index * barHeight\r\n\r\n  const bar = g.selectAll('g').data(orderedFrequencies).enter().append('g')\r\n\r\n  bar.append('rect')\r\n  .attr('x', '0').attr('y', barPadding)\r\n  .attr('height', barInnerHeight)\r\n  .attr('width', d => x(d.frequency))\r\n  .attr('fill', '#90caf9')\r\n\r\n  bar.attr('transform', (d, i) => `translate(0, ${y(i)})`)\r\n    .append('text')\r\n    .text(d => d.word)\r\n    .attr('font-size', '14')\r\n    .attr('x', '5').attr('y', `${barInnerHeight}`)\r\n\r\n  bar.append('text')\r\n    .text(d => d.frequency)\r\n    .attr('font-size', '14')\r\n    .attr('x', d => x(d.frequency) + 6).attr('y', `${barInnerHeight}`)\r\n}\r\n\r\nexport default CommonWords\r\n","import { GetContentString } from '../shared/deltaParser'\r\nimport Text from 'markov-chains-text'\r\nimport * as d3 from 'd3'\r\n\r\nconst AiGhostwriter = ({ el, maxHeight, maxWidth }, chapters) => {\r\n  const fullText = chapters.map(chapter => GetContentString(chapter.content)).join(' ')\r\n\r\n  if (fullText.length < 1500) {\r\n    throw new Error(`You don't have enough content for the A.I. to work with. Write some more content in chapters and try again.`)\r\n  }\r\n\r\n  const fakeText = new Text(fullText)\r\n  const sentence = fakeText.makeSentence({ tries: 50 })\r\n\r\n  el.innerHTML = ''\r\n  const parent = d3.select(el)\r\n  parent.append('p').append('strong').text('A.I. generated sentence:')\r\n\r\n  if (sentence instanceof Error) {\r\n    parent.append('p').style('max-width', '600px').append('em')\r\n      .text(`Failed to generate unique text. Please try again. The more content in chapters you've written, the more often this will work.`)\r\n    return\r\n  }\r\n\r\n  parent.append('p').style('max-width', '600px').text(sentence)\r\n}\r\n\r\nexport default AiGhostwriter\r\n","/*\r\nAnalysis: {\r\n  description String,\r\n  inputs String[],\r\n  run (resultsWindow HTMLElement, document Delta, args Object),\r\n  title String\r\n}\r\n*/\r\n\r\nimport * as d3 from 'd3'\r\nimport swal from 'sweetalert'\r\n\r\nimport AiGhostwriter from './aiGhostwriter.analysis'\r\nimport CommonWords from './commonWords.analysis'\r\nimport WordOverTime from './wordOverTime.analysis'\r\n\r\nconst clearPrevious = (el) => {\r\n  el.innerHTML = ''\r\n}\r\n\r\nconst makeSvg = (el) => {\r\n  const maxHeight = 400\r\n  const maxWidth = el.offsetWidth\r\n  const g = d3.select(el)\r\n    .append('svg')\r\n    .style('background-color', '#FFF')\r\n    .attr('height', maxHeight)\r\n    .attr('width', maxWidth)\r\n    .append('g')\r\n\r\n  return { g, el, maxHeight, maxWidth }\r\n}\r\n\r\nconst safelyRunAnalysis = (analysisFn, args, onError) => {\r\n  try {\r\n    analysisFn(...args)\r\n  } catch (e) {\r\n    swal({\r\n      icon: 'error',\r\n      text: e\r\n    })\r\n    onError()\r\n  }\r\n}\r\n\r\nconst validateArgs = (inputs, args) => {\r\n  for (const input of inputs) {\r\n    if (!args[input]) {\r\n      swal({\r\n        icon: 'error',\r\n        text: `Please fill in all required inputs.`\r\n      })\r\n      return false\r\n    }\r\n  }\r\n  return true\r\n}\r\n\r\nconst wordFrequency = {\r\n  description:\r\n    `Find your top 10 most frequently used words (ignoring common English words like \"the\")`,\r\n  inputs: null,\r\n  run (resultsWindow, { chapters }) {\r\n    clearPrevious(resultsWindow)\r\n\r\n    const unarchivedChapters = chapters.filter(chapter => !chapter.archived && !!chapter.content)\r\n\r\n    safelyRunAnalysis(\r\n      CommonWords,\r\n      [makeSvg(resultsWindow), unarchivedChapters],\r\n      () => clearPrevious(resultsWindow)\r\n    )\r\n  },\r\n  title: 'Most common words'\r\n}\r\n\r\nconst wordOverTime = {\r\n  description: 'Track your usage of a specific word in each chapter',\r\n  inputs: ['Word'],\r\n  run (resultsWindow, { chapters }, args) {\r\n    if (!validateArgs(this.inputs, args)) {\r\n      return\r\n    }\r\n    clearPrevious(resultsWindow)\r\n\r\n    const unarchivedChapters = chapters.filter(chapter => !chapter.archived && !!chapter.content)\r\n\r\n    safelyRunAnalysis(\r\n      WordOverTime,\r\n      [makeSvg(resultsWindow), unarchivedChapters, args],\r\n      () => clearPrevious(resultsWindow)\r\n    )\r\n  },\r\n  title: 'Word over time'\r\n}\r\n\r\nconst aiGhostwriter = {\r\n  description: 'See a computer-generated sentence based on your work',\r\n  inputs: null,\r\n  run (resultsWindow, { chapters }) {\r\n    clearPrevious(resultsWindow)\r\n\r\n    const chaptersWithContent = chapters.filter(chapter => !!chapter.content)\r\n\r\n    safelyRunAnalysis(\r\n      AiGhostwriter,\r\n      [makeSvg(resultsWindow), chaptersWithContent],\r\n      () => clearPrevious(resultsWindow)\r\n    )\r\n  },\r\n  title: 'A.I. ghostwriter'\r\n}\r\n\r\nconst all = [\r\n  wordFrequency,\r\n  wordOverTime,\r\n  aiGhostwriter\r\n].map(analysis => {\r\n  analysis.args = {}\r\n  return analysis\r\n})\r\n\r\nexport default all\r\n","import * as d3 from 'd3'\r\nimport { GetWordArray } from '../shared/deltaParser'\r\nimport range from 'lodash/range'\r\n\r\nconst WordOverTime = ({ g: svg, maxWidth, maxHeight }, chapters, { Word: wordArg }) => {\r\n  const chapterResults = []\r\n\r\n  for (const chapter of chapters) {\r\n    const words = GetWordArray(chapter.content)\r\n    const frequency = words.filter(word => word.toLowerCase() === wordArg.toLowerCase()).length\r\n    chapterResults.push({\r\n      frequency,\r\n      title: chapter.title\r\n    })\r\n  }\r\n\r\n  const frequencies = chapterResults.map(result => result.frequency)\r\n\r\n  const domain = [0, Math.max(...frequencies)]\r\n  const margin = { bottom: 40, left: 30, top: 20, right: 50 }\r\n\r\n  // Create svg and g and position with a margin\r\n  const g = svg.attr('transform', `translate(${margin.left}, ${margin.top})`)\r\n\r\n  const x = d3.scaleLinear()\r\n    .domain([1, chapterResults.length])\r\n    .rangeRound([0, maxWidth - margin.left - margin.right])\r\n\r\n  const y = d3.scaleLinear()\r\n    .domain(domain)\r\n    .rangeRound([maxHeight - margin.bottom - margin.top, 0])\r\n\r\n  g.append('g')\r\n    .attr('transform', `translate(0, ${maxHeight - margin.bottom - margin.top})`)\r\n    .call(\r\n      d3.axisBottom(x)\r\n        .tickFormat(i => truncate(chapterResults[i - 1].title, 20))\r\n        .tickValues(range(1, chapterResults.length + 1))\r\n    )\r\n    .selectAll('text')\r\n    .attr('transform', 'rotate(-8)')\r\n\r\n  g.append('g')\r\n    .attr('transform', `translate(0, 0)`)\r\n    .call(d3.axisLeft(y))\r\n\r\n  const line = d3.line()\r\n    .x((d, index) => x(index + 1))\r\n    .y(d => y(d.frequency))\r\n\r\n  g.append('path')\r\n    .datum(chapterResults)\r\n    .attr('fill', 'none')\r\n    .attr('stroke', '#0d47a1')\r\n    .attr('stroke-linejoin', 'bevel')\r\n    .attr('stroke-linecap', 'round')\r\n    .attr('stroke-width', '2')\r\n    .attr('d', line)\r\n\r\n  g.append('rect')\r\n    .attr('x', '5').attr('y', '-9')\r\n    .attr('height', '22')\r\n    .attr('width', '67')\r\n    .attr('fill', 'rgba(230, 230, 230, 0.8)')\r\n\r\n  g.append('text')\r\n    .attr('font-size', '12')\r\n    .attr('x', '10')\r\n    .attr('y', '5')\r\n    .text('Occurrences')\r\n}\r\n\r\nfunction truncate (str, length) {\r\n  if (str.length < length) {\r\n    return str\r\n  }\r\n\r\n  return `${str.substring(0, length)}...`\r\n}\r\n\r\nexport default WordOverTime\r\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"analyser-wrap\"},[_c('div',{staticClass:\"analyser\"},[_c('div',{staticClass:\"analyses\"},[_c('h4',{staticClass:\"analysis-title\"},[_vm._v(\"\\n        Select an analysis:\\n      \")]),_vm._v(\" \"),_vm._l((_vm.Analyses),function(analysis,index){return _c('button',{directives:[{name:\"tooltip\",rawName:\"v-tooltip\"}],key:index,staticClass:\"analysis-button\",class:{ 'button-green': _vm.currentAnalysis === analysis },attrs:{\"title\":analysis.description},on:{\"click\":function($event){_vm.selectAnalysis(analysis)}}},[_vm._v(\"\\n        \"+_vm._s(analysis.title)+\"\\n      \")])})],2),_vm._v(\" \"),(_vm.currentAnalysis)?_c('div',{staticClass:\"analysis-inputs\"},[(_vm.showInputs)?[_c('h4',{staticClass:\"analysis-title\"},[_vm._v(\"\\n          Enter desired inputs:\\n        \")]),_vm._v(\" \"),_vm._l((_vm.currentAnalysis.inputs),function(input,index){return _c('div',{key:index,staticClass:\"analysis-input\"},[_c('label',{attrs:{\"for\":_vm.getInputId(input)}},[_vm._v(_vm._s(input))]),_vm._v(\" \"),_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.currentAnalysis.args[input]),expression:\"currentAnalysis.args[input]\"}],attrs:{\"id\":_vm.getInputId(input)},domProps:{\"value\":(_vm.currentAnalysis.args[input])},on:{\"input\":function($event){if($event.target.composing){ return; }_vm.$set(_vm.currentAnalysis.args, input, $event.target.value)}}})])})]:_vm._e(),_vm._v(\" \"),_c('button',{staticClass:\"analysis-button button-green\",on:{\"click\":function($event){_vm.runAnalysis(_vm.currentAnalysis)}}},[_vm._v(\"Run the analysis\")])],2):_vm._e(),_vm._v(\" \"),_c('div',{ref:\"results\",staticClass:\"results\"})])])}\nvar staticRenderFns = []\nexport { render, staticRenderFns }","<template>\r\n  <div class=\"analyser-wrap\">\r\n    <div class=\"analyser\">\r\n      <div class=\"analyses\">\r\n        <h4 class=\"analysis-title\">\r\n          Select an analysis:\r\n        </h4>\r\n        <button class=\"analysis-button\" v-for=\"(analysis, index) in Analyses\" :key=\"index\"\r\n                :class=\"{ 'button-green': currentAnalysis === analysis }\"\r\n                @click=\"selectAnalysis(analysis)\" :title=\"analysis.description\" v-tooltip>\r\n          {{ analysis.title }}\r\n        </button>\r\n      </div>\r\n      <div class=\"analysis-inputs\" v-if=\"currentAnalysis\">\r\n        <template v-if=\"showInputs\">\r\n          <h4 class=\"analysis-title\">\r\n            Enter desired inputs:\r\n          </h4>\r\n          <div class=\"analysis-input\" v-for=\"(input, index) in currentAnalysis.inputs\" :key=\"index\">\r\n            <label :for=\"getInputId(input)\">{{ input }}</label>\r\n            <input :id=\"getInputId(input)\" v-model=\"currentAnalysis.args[input]\">\r\n          </div>\r\n        </template>\r\n        <button class=\"analysis-button button-green\" @click=\"runAnalysis(currentAnalysis)\">Run the analysis</button>\r\n      </div>\r\n      <div class=\"results\" ref=\"results\"></div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Analyses from './analyses'\r\nimport tooltip from '../shared/tooltip.directive'\r\n\r\nexport default {\r\n  computed: {\r\n    document () {\r\n      return this.$store.state.chapters\r\n    },\r\n    showInputs () {\r\n      return (this.currentAnalysis &&\r\n             this.currentAnalysis.inputs &&\r\n             this.currentAnalysis.inputs.length)\r\n    }\r\n  },\r\n  data () {\r\n    return {\r\n      Analyses,\r\n      currentAnalysis: null\r\n    }\r\n  },\r\n  directives: {\r\n    tooltip\r\n  },\r\n  methods: {\r\n    getInputId (input) {\r\n      return `input-${input}`\r\n    },\r\n    runAnalysis (analysis) {\r\n      analysis.run(this.$refs.results, this.document, analysis.args)\r\n    },\r\n    selectAnalysis (analysis) {\r\n      this.currentAnalysis = analysis\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.analyser-wrap {\r\n  display: flex;\r\n  justify-content: center;\r\n  width: 100%;\r\n}\r\n\r\n.analyser {\r\n  display: block;\r\n  flex: 1;\r\n  max-width: 1050px;\r\n}\r\n\r\n.analyses {\r\n  margin-bottom: 10px;\r\n}\r\n\r\n.analysis-button {\r\n  margin-right: 6px;\r\n  margin-top: 12px;\r\n}\r\n\r\n.results {\r\n  margin-top: 12px;\r\n}\r\n</style>\r\n"],"sourceRoot":""}